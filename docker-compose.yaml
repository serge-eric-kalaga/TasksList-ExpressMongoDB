# version: '3'

services:
  express_api:
    container_name: express_api
    build: ./app
    volumes:
      - ./app:/app/
    expose:
      - 5000
    ports:
      - "5000:5000"
    env_file:
      - ./app/.env
    depends_on:
      - mongo_db
    networks:
      - asgard
      - monitoring

  mongo_db:
    container_name: mongo_db
    image: mongo
    # build: ./data/mongo
    restart: always
    expose:
      - 27017
    env_file:
      - ./data/mongo/.env
    volumes:
      - ./data/mongo/src:/data/db
    networks:
      - asgard

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    env_file:
      - ./data/mongo/.env
    depends_on:
      - mongo_db
    networks:
      - asgard

  # prometheus:
  #   image: prom/prometheus:v2.52.0
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   restart: unless-stopped
  #   expose:
  #     - 9090
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - monitoring
  #   labels:
  #     org.label-schema.group: "monitoring"

  # grafana:
  #   image: grafana/grafana:11.0.0
  #   container_name: grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
  #     - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   restart: unless-stopped
  #   expose:
  #     - 3000
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - monitoring
  #   labels:
  #     org.label-schema.group: "monitoring"

networks:
  asgard:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
