# version: '3'

services:
  express_api:
    container_name: express_api
    build: ./app
    volumes:
      - ./app:/app/
    develop:
      watch:
        # may paths
        - path: ./app/Dockerfile
          action: rebuild
        - path: ./app/package.json
          action: rebuild
    expose:
      - 5000
    ports:
      - "5000:5000"
    env_file:
      - ./app/.env
    depends_on:
      - mongo_db
    networks:
      - asgard
      - monitoring

  mongo_db:
    container_name: mongo_db
    image: mongo
    # build: ./data/mongo
    restart: always
    expose:
      - 27017
    env_file:
      - ./data/mongo/.env
    volumes:
      - ./data/mongo/src:/data/db
    networks:
      - asgard

#   mongo-express:
#     container_name: mongo-express
#     image: mongo-express
#     restart: always
#     ports:
#       - 8081:8081
#     env_file:
#       - ./data/mongo/.env
#     depends_on:
#       - mongo_db
#     networks:
#       - asgard

#   cadvisor:
#     image: gcr.io/cadvisor/cadvisor:v0.49.1
#     container_name: cadvisor
#     privileged: true
#     devices:
#       - /dev/kmsg:/dev/kmsg
#     ports:
#       - "8080:8080"
#     volumes:
#       - /:/rootfs:ro
#       - /var/run:/var/run:ro
#       - /sys:/sys:ro
#       - /var/lib/docker:/var/lib/docker:ro

#   prometheus:
#     image: prom/prometheus:v2.52.0
#     container_name: prometheus
#     volumes:
#       - ./monitoring/prometheus:/etc/prometheus
#       - ./monitoring/prometheus/prometheus_data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       # - '--storage.tsdb.path=/prometheus'
#       # - '--web.console.libraries=/etc/prometheus/console_libraries'
#       # - '--web.console.templates=/etc/prometheus/consoles'
#       # - '--storage.tsdb.retention.time=200h'
#       # - '--web.enable-lifecycle'
#     restart: unless-stopped
#     depends_on:
#       - express_api
#       - cadvisor
#     expose:
#       - 9090
#     ports:
#       - "9090:9090"
#     # develop:
#     #   watch:
#     #     - path: ./monitoring/prometheus/*
#     #       action: rebuild
#     networks:
#       - monitoring
#     labels:
#       org.label-schema.group: "monitoring"

#   alertmanager:
#     image: prom/alertmanager:v0.27.0
#     container_name: alertmanager
#     volumes:
#       - ./monitoring/alertmanager:/etc/alertmanager
#     command:
#       - '--config.file=/etc/alertmanager/config.yml'
#       - '--storage.path=/alertmanager'
#     restart: unless-stopped
#     expose:
#       - 9093
#     develop:
#       watch:
#         - path: ./monitoring/alertmanager/*
#           action: rebuild
#     ports:
#       - "9093:9093"
#     networks:
#       - monitoring
#     labels:
#       org.label-schema.group: "monitoring"

#   grafana:
#     image: grafana/grafana
#     container_name: grafana
#     volumes:
#       - ./monitoring/grafana/grafana_data:/var/lib/grafana
#       - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
#       - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
#     depends_on:
#       - prometheus
#     env_file:
#       - ./monitoring/grafana/.env
#     ports:
#       - "3000:3000"
#     # develop:
#       # watch:
#       #   - path: ./monitoring/grafana/*
#       #     action: rebuild
#     expose:
#       - 3000
#     networks:
#       - monitoring
#     labels:
#       org.label-schema.group: "monitoring"

networks:
  asgard:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
